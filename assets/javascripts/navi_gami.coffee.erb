plugin_name = 'navi gami'

# get fabmanager main module
app = angular.module('application')


# initialize module and configure routing
angular.module('application.navi_gami', ['application'])
  .config [
    '$stateProvider',
    ($stateProvider) ->
      $stateProvider
        .state 'app.admin.navi_gami',
          url: '/navinum_gamification'
          views:
            'main@':
              templateUrl: '<%= asset_path "templates/navi_gami.html" %>'
              controller: 'NGController'
          resolve:
            challengesPromise: ['NGChallenge', (NGChallenge)->
              NGChallenge.query().$promise
            ]
            configPromise: ['NGConfig', (NGConfig)->
              NGConfig.get().$promise
            ]
            translations: ['Translations', (Translations)->
              Translations.query(['navi_gami']).$promise
            ]

  ]

  .factory 'NGChallenge', ["$resource", ($resource)->
    $resource "/navi_gami/challenges/:id",
      {id: "@id"},
      update:
        method: 'PUT'
  ]

  .factory 'NGConfig', ['$resource', ($resource)->
    $resource "/navi_gami/config",
      { },
      update:
        method: 'PUT'
  ]

  .controller 'NGController', ['$scope', 'NGChallenge', 'challengesPromise', 'NGConfig', 'configPromise', '_t', 'growl', ($scope, NGChallenge, challengesPromise, NGConfig, configPromise, _t, growl)->
    $scope.challenges = challengesPromise
    $scope.config = configPromise

    $scope.saveChallenge = (index)->
      NGChallenge.update(id: $scope.challenges[index].id, { challenge: $scope.challenges[index] }, (challenge)->
        $scope.challenges[index] = challenge
        growl.success(_t('navi_gami.notice.challenge_successfully_saved'))
      )

    $scope.saveConfig = (config)->
      NGConfig.update({}, config: config, (configResp)->
        $scope.config = configResp
        growl.success(_t('navi_gami.notice.config_successfully_saved'))
      , (erorr)->
        growl.error(_t('navi_gami.notice.config_not_saved'))
      )

  ]


  .controller 'NGProfileDataController', ['$http', '$scope', ($http, $scope)->
    vm = @

    userUID = $scope.$parent.user.uid

    if userUID? and (userUID.length > 0)
      $http.get("/navi_gami/gamification_data_proxy/profile_data?user_uid=#{userUID}").then((response)->
        vm.externalSpaceUrl = response.data.external_space_url
        vm.status = response.data.status
      )

    return vm
  ]






# injects dependecy to main app module
app.requires.push('application.navi_gami')


window.Fablab.adminNavLinks = window.Fablab.adminNavLinks || []
window.Fablab.adminNavLinks.push(
  {
    state: 'app.admin.navi_gami'
    linkText: 'Gamification'
    linkIcon: 'gamepad'
  }
)
